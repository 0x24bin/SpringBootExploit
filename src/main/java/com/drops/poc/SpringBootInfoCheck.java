package com.drops.poc;

import cn.hutool.http.HttpRequest;
import cn.hutool.http.HttpResponse;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.drops.ui.MainController;
import com.drops.utils.HTTPUtils;
import com.drops.utils.PropertiesBean;
import com.drops.utils.ResponseUtil;
import com.drops.utils.URLUtil;

import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

/**
 * @ClassName: SpringBootInfoCheck
 * @Description: TODO
 * @Author: Summer
 * @Date: 2021/7/28 9:23
 * @Version: v1.0.0
 * @Description:
 **/
public class SpringBootInfoCheck {
    public String url;
    public String method;
    private MainController mainController;
    private static final String DefalutEncoding = "UTF-8";
    public static SpringBootInfo info = new SpringBootInfo();
    static boolean SpringbootVersionV1 = false;
    private SpringBootUtil SpringbootUtils;


    public SpringBootInfoCheck(){}

    /**
     * @Description: 对目标首先进行特征检测
     * @param target
     *
     * @return:
     */
    public static Boolean CheckPointInfo(String target){
        System.out.println("target is -> " + target);
        String url = URLUtil.normalizeURL(target + "404");
        System.out.println("url is  -> " + url);
        HttpResponse response = HTTPUtils.getRequest(url);
        int statscode = response.getStatus();
        String context = response.body();
        if (statscode == 404 || statscode == 403){
            return context.contains("Whitelabel Error Page") || context.contains("There was an unexpected error");

        }
        return false;

    }

    public static Boolean check404(String target){
        System.out.println("target is -> " + target);
        String url = URLUtil.normalizeURL(target) + UUID.randomUUID();
        System.out.println("url is  -> " + url);
        return HTTPUtils.getRequest(url).getStatus() == 200;

    }




    // Spring Boot 1.x版本端点在根URL下注册。
    public static boolean checkActuatorPointV1(String target){

        for (String point : info.pointListV1){
            if (SpringBootUtil.checkPoint(target, point)){
                SpringbootVersionV1 = true;
            }
        }
        return false;
    }
    // Spring Boot 2.x版本端点移动到/actuator/路径
    public static boolean checkActuatorPointV2(String target){
        for (String point : info.pointListV2){
            if (SpringBootUtil.checkPoint(target, point)){
                SpringbootVersionV1 = true;
            }
        }
        return false;
    }

    // Spring Boot env端点存在环境属性覆盖和XStream反序列化漏洞
    static void checkEnvPointV1(String addr){
        String url = URLUtil.normalizeURL(addr) + "env";
        HttpResponse response = HTTPUtils.getRequest(url);
        String resp = SpringBootUtil.scannerOutput(new Scanner(response.body()));
        if (response.getStatus() == 200){
            SpringbootVersionV1 = true;
            System.out.println("检测到env端点，Springboot 1.x: "+ url);
            PropertiesBean properties = SpringBootUtil.EnvParser(resp);
            SpringBootInfo.parseProperties(properties);
            if (resp.contains("spring.cloud.bootstrap.location")){
                System.out.println(" [*]检测到spring.cloud.bootstrap.location属性,可进行环境属性覆盖RCE!");
            }else if(resp.contains("eureka.client.serviceUrl.defaultZone")){
                System.out.println(" [*]检测到eureka.client.serviceUrl.defaultZone属性,可进行XStream反序列化RCE!");
            }else if (resp.contains("spring.h2.console.enabled")){
                System.out.println(" [*]检测到配置了H2 console属性,可能可以进行h2反序列化RCE!");
            }
        }
    }

    // Spring Boot 2.x版本存在H2配置不当导致的RCE，目前非正则判断，测试阶段
    static void checkEnvPointV2(String addr){
        final String url = addr+"actuator/env";
        HttpResponse response = HTTPUtils.getRequest(url);
        String resp = SpringBootUtil.scannerOutput(new Scanner(response.body()));
        //String resp = response.readToText();
        if (ResponseUtil.getStats(response) ==200){
            System.out.println("检测到 env端点，Springboot 2.x: "+ url);
            PropertiesBean properties = SpringBootUtil.EnvParser(resp);
            SpringBootInfo.parseProperties(properties);
            if (resp.contains("spring.cloud.bootstrap.location")){
                System.out.println(" [*]检测到spring.cloud.bootstrap.location属性,可进行环境属性覆盖RCE!");
            }else if(resp.contains("eureka.client.serviceUrl.defaultZone")){
                System.out.println(" [*]检测到eureka.client.serviceUrl.defaultZone属性,可进行XStream反序列化RCE!");
            }else if (resp.contains("spring.h2.console.enabled")){
                System.out.println(" [*]检测到配置了H2 console属性,可能可以进行h2反序列化RCE!");
            }
        }
        HttpResponse h2Response = HTTPUtils.postRequestV2(addr ,"actuator/restart");

        if (ResponseUtil.getStats(h2Response) == 200){
            System.out.println(" [*]检测到env restart端点,可进行H2 RCE!");
        }
    }






    // https://blog.csdn.net/testcs_dn/article/details/79033009/
    public static boolean checkPoint(String url, HttpResponse resp){
        String s = resp.body();
        // hystrix.stream
        if (url.contains("hystrix.stream")){
            return "ping:".contains(s)||"data:".contains(s);
            // health
        }else if (url.contains("health")){
            try {
                Map res = (Map) JSON.parse(s);
                return res.containsKey("status")||res.containsKey("diskSpace");
            }catch (Exception e){
                return false;
            }
            // beans
        }else if (url.contains("beans")){
            Map res;
            try {
                JSONArray objects = JSON.parseArray(s);
                for (Object o:objects){
                    res = (Map)o;
                    return res.containsKey("bean")||res.containsKey("scope")||res.containsKey("dependencies");
                }
            }catch (Exception e){
                return false;
            }
            // configprops
        }else if (url.contains("configprops")){
            try {
                Map res = (Map)JSON.parse(s);
                return res.containsKey("configurationPropertiesReportEndpoint");
            }catch (Exception e){
                return false;
            }
        }else if (url.contains("mappings")){
            return s.contains("bean")||s.contains("method");
        }else if (url.contains("metrics")){
            return s.contains("threads")||s.contains("heap");
        }
        return false;
    }


    public static PropertiesBean EnvParser(String result){
        PropertiesBean propertiesBean = new PropertiesBean();
        try {
            JSONObject jsonObject = JSON.parseObject(result);
            JSONArray propertySources = jsonObject.getJSONArray("propertySources");
            JSONObject propertySource;
            if (propertySources.size() > 0) {
                for (int i = 0; i < propertySources.size(); i++) {
                    propertySource = propertySources.getJSONObject(i);
                    String name = (String) propertySource.get("name");
                    if ("systemProperties".equals(name)) {
                        JSONObject properties = propertySource.getJSONObject("properties");
                        String jvmName = properties.getJSONObject("java.vm.name").getString("value");
                        String javaVersion = properties.getJSONObject("java.runtime.version").getString("value");
                        String userName = properties.getJSONObject("user.name").getString("value");
                        propertiesBean.setHaveInfo(true);
                        propertiesBean.setJvmName(jvmName);
                        propertiesBean.setJavaVersion(javaVersion);
                        propertiesBean.setUserName(userName);
                    } else if ("server.ports".equals(name)) {
                        propertiesBean.setHaveInfo(true);
                        JSONObject properties = propertySource.getJSONObject("properties");
                        String serverPort = properties.getJSONObject("local.server.port").getString("value");
                        propertiesBean.setServerPort(serverPort);
                    }

                }

            }
        }catch (Exception e){
            propertiesBean.setHaveInfo(false);
        }
        return propertiesBean;
    }

}
