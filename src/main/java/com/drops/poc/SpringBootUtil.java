package com.drops.poc;

import cn.hutool.http.HttpResponse;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.drops.ui.MainController;
import com.drops.utils.HTTPUtils;
import com.drops.utils.PropertiesBean;
import com.drops.utils.URLUtil;

import java.util.Scanner;

/**
 * @ClassName: SpringBootUtil
 * @Description: TODO
 * @Author: Summer
 * @Date: 2021/7/28 14:14
 * @Version: v1.0.0
 * @Description:
 **/
public class SpringBootUtil {
//    private static HTTPUtils httpUtils;
    static HTTPUtils httpUtils = new HTTPUtils();

    public MainController mainController ;
    public static boolean flag = false;

    public static boolean checkPoint(String target, String point){
        String url = URLUtil.normalizeURL(target) + point;
        System.out.println("正在检测：\t" + url);
        HttpResponse response = HTTPUtils.getRequest(url);
        if (response.getStatus() == 200){
            if (SpringBootInfoCheck.checkPoint(url, response)){
                System.out.println("检测到 " + point + "端点，已做验证：" + url);
                flag = true;
            }else{
                System.out.println("检测到 "+ point +"端点，请手工验证: "+ url);

            }


        }

        return flag;
    }

    public static String scannerOutput(Scanner scanner){
        StringBuilder builder = new StringBuilder();
        while (scanner.hasNext()){
            builder.append(scanner.nextLine()).append("\n");
        }
        return builder.toString();
    }


    public static PropertiesBean EnvParser(String result){
        PropertiesBean propertiesBean = new PropertiesBean();
        try {
            JSONObject jsonObject = JSON.parseObject(result);
            JSONArray propertySources = jsonObject.getJSONArray("propertySources");
            JSONObject propertySource;
            if (propertySources.size() > 0) {
                for (int i = 0; i < propertySources.size(); i++) {
                    propertySource = propertySources.getJSONObject(i);
                    String name = (String) propertySource.get("name");
                    if ("systemProperties".equals(name)) {
                        JSONObject properties = propertySource.getJSONObject("properties");
                        String jvmName = properties.getJSONObject("java.vm.name").getString("value");
                        String javaVersion = properties.getJSONObject("java.runtime.version").getString("value");
                        String userName = properties.getJSONObject("user.name").getString("value");
                        propertiesBean.setHaveInfo(true);
                        propertiesBean.setJvmName(jvmName);
                        propertiesBean.setJavaVersion(javaVersion);
                        propertiesBean.setUserName(userName);
                    } else if ("server.ports".equals(name)) {
                        propertiesBean.setHaveInfo(true);
                        JSONObject properties = propertySource.getJSONObject("properties");
                        String serverPort = properties.getJSONObject("local.server.port").getString("value");
                        propertiesBean.setServerPort(serverPort);
                    }

                }

            }
        }catch (Exception e){
            propertiesBean.setHaveInfo(false);
        }
        return propertiesBean;
    }
}
